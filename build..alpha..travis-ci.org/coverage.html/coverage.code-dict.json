{"/home/travis/build/npmtest/node-npmtest-vinyl-ftp/test.js":"/* istanbul instrument in package npmtest_vinyl_ftp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vinyl-ftp/lib.npmtest_vinyl_ftp.js":"/* istanbul instrument in package npmtest_vinyl_ftp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_vinyl_ftp = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_vinyl_ftp = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-vinyl-ftp/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-vinyl-ftp && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_vinyl_ftp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_vinyl_ftp\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_vinyl_ftp.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_vinyl_ftp.rollup.js'] =\n            local.assetsDict['/assets.npmtest_vinyl_ftp.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_vinyl_ftp.__dirname + '/lib.npmtest_vinyl_ftp.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vinyl-ftp/node_modules/vinyl-ftp/index.js":"var assign = require( 'object-assign' );\n\nmodule.exports = VinylFtp;\n\nfunction VinylFtp( config ) {\n\n\tif ( !( this instanceof VinylFtp ) ) return new VinylFtp( config );\n\n\tthis.config = assign( {\n\t\tparallel:       3,\n\t\tmaxConnections: config.parallel || 5,\n\t\tlog:            null,\n\t\ttimeOffset:     0,\n\t\tidleTimeout:    100,\n\t\tpassword:       config.password || config.pass,\n\t\treload:         false\n\t}, config );\n\n\t// connection pool\n\tthis.queue = [];\n\tthis.connectionCount = 0;\n\tthis.idle = [];\n\tthis.idleTimer = null;\n\n}\n\nVinylFtp.create = function ( config ) {\n\n\treturn new VinylFtp( config );\n\n};\n\nVinylFtp.prototype.glob = require( './lib/glob' );\nVinylFtp.prototype.src = require( './lib/src' );\nVinylFtp.prototype.dest = require( './lib/dest' );\nVinylFtp.prototype.delete = require( './lib/delete' );\nVinylFtp.prototype.rmdir = require( './lib/rmdir' );\nVinylFtp.prototype.dest = require( './lib/dest' );\nVinylFtp.prototype.clean = require( './lib/clean' );\n\nassign(\n\tVinylFtp.prototype,\n\trequire( './lib/filter' ),\n\trequire( './lib/mode' ),\n\trequire( './lib/ftp' ),\n\trequire( './lib/helpers' )\n);\n","/home/travis/build/npmtest/node-npmtest-vinyl-ftp/node_modules/vinyl-ftp/lib/glob.js":"var Stream = require( 'stream' );\nvar minimatch = require( 'minimatch' );\nvar Minimatch = minimatch.Minimatch;\n\nmodule.exports = glob;\n\nfunction glob( globs, options ) {\n\n\toptions = this.makeOptions( options );\n\tif ( typeof globs === 'string' ) globs = [ globs ];\n\n\tvar self = this;\n\tvar positives = [];\n\tvar negatives = [];\n\tglobs.forEach( function ( glob ) {\n\n\t\tvar mm = new Minimatch( self.join( '/', glob ), options );\n\t\tmm.base = mmBase( mm );\n\n\t\tif ( mm.negate ) negatives.push( mm );\n\t\telse positives.push( mm );\n\n\t} );\n\n\tvar stream = new Stream.PassThrough( { objectMode: true } );\n\tvar scanning = 0;\n\n\t// get file list and write to stream on match.\n\t// recursively scan on partial match.\n\tfunction scan( path, mm ) {\n\n\t\t++scanning;\n\t\tself.mlsdOrList( path, onList );\n\n\t\tfunction onList( err, files ) {\n\n\t\t\tif ( err ) return stream.emit( 'error', err );\n\n\t\t\tfiles.forEach( function ( file ) {\n\n\t\t\t\tif ( self.isDirectory( file ) && mm.match( file.path, true ) ) {\n\n\t\t\t\t\tscan( file.path, mm );\n\n\t\t\t\t}\n\n\t\t\t\twrite( file ); // do this after scan; next stream might change file.path\n\n\t\t\t} );\n\n\t\t\t--scanning;\n\n\t\t\tif ( scanning === 0 ) stream.emit( 'end' );\n\n\t\t}\n\n\t}\n\n\t// write file on match. check it only once.\n\tvar seen = {};\n\n\tfunction write( file ) {\n\n\t\tif ( !seen[ file.path ] ) {\n\n\t\t\tseen[ file.path ] = true;\n\t\t\tif ( match( file ) ) stream.write( file );\n\n\t\t}\n\n\t}\n\n\tfunction match( file ) {\n\n\t\tvar ok = false;\n\t\tvar base;\n\t\tvar i, l;\n\n\t\tfor ( i = 0, l = positives.length; i < l; ++i ) {\n\n\t\t\tif ( positives[ i ].match( file.path ) ) {\n\n\t\t\t\tok = true;\n\t\t\t\tbase = options.base || positives[ i ].base;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( !ok ) return false;\n\n\t\tfor ( i = 0, l = negatives.length; i < l; ++i ) {\n\n\t\t\tif ( !negatives[ i ].match( file.path ) ) return false;\n\n\t\t}\n\n\t\tfile.cwd = options.cwd || '/';\n\t\tfile.base = base;\n\t\treturn true;\n\n\t}\n\n\t// scan each positive glob\n\tpositives.forEach( function ( mm ) {\n\n\t\tmm.set.forEach( function ( parts ) {\n\n\t\t\tscan( partsBase( parts ), mm );\n\n\t\t} );\n\n\t} );\n\n\treturn stream;\n\n}\n\n//\n\n// get base path of minimatch instance\nfunction mmBase( mm ) {\n\n\tvar first =  mm.set[ 0 ];\n\tvar i, l;\n\n\tPARTS: for ( i = 0, l = first.length - 1; i < l; ++i ) {\n\n\t\tif ( typeof first[ i ] !== 'string' ) break PARTS;\n\n\t\tfor ( var j = 1, k = mm.set.length; j < k; ++j ) {\n\n\t\t\tif ( mm.set[ j ][ i ] !== first[ i ] ) break PARTS;\n\n\t\t}\n\n\t}\n\n\treturn first.slice( 0, i ).join( '/' );\n\n}\n\n// get base path of minimatch parts\nfunction partsBase( parts ) {\n\n\tfor ( var i = 0, l = parts.length - 1; i < l; ++i ) {\n\n\t\tif ( typeof parts[ i ] !== 'string' ) break;\n\n\t}\n\n\treturn parts.slice( 0, i ).join( '/' );\n\n}\n","/home/travis/build/npmtest/node-npmtest-vinyl-ftp/node_modules/vinyl-ftp/lib/src.js":"var assign = require( 'object-assign' );\nvar through = require( 'through2' );\n\nmodule.exports = src;\n\nfunction src( globs, options ) {\n\n\toptions = assign( { buffer: true, read: true }, options );\n\toptions = this.makeOptions( options );\n\tvar self = this;\n\n\tvar glob = this.glob( globs, options );\n\n\tif ( options.since ) {\n\n\t\tvar filterSince = through.obj( function ( file, enc, cb ) {\n\n\t\t\tif ( options.since < file.ftp.date ) {\n\n\t\t\t\treturn cb( null, file );\n\n\t\t\t}\n\n\t\t\tcb();\n\n\t\t} );\n\n\t\tglob = glob.pipe( filterSince );\n\n\t}\n\n\tif ( !options.read ) return glob;\n\n\tfunction getContents( file, cb ) {\n\n\t\tif ( self.isDirectory( file ) ) return cb( null, file );\n\t\tif ( options.buffer ) return self.downbuffer( file.path, onContents );\n\t\tself.downstream( file.path, onContents );\n\n\t\tfunction onContents( err, contents ) {\n\n\t\t\tif ( err ) return cb( err );\n\t\t\tfile.contents = contents;\n\n\t\t\tcb( null, file );\n\n\t\t}\n\n\t}\n\n\treturn glob.pipe( this.parallel( getContents, options ) );\n\n}\n","/home/travis/build/npmtest/node-npmtest-vinyl-ftp/node_modules/vinyl-ftp/lib/dest.js":"module.exports = dest;\n\nfunction dest( folder, options ) {\n\n\toptions = this.makeOptions( options );\n\tvar self = this;\n\n\tvar stream = this.parallel( function ( file, cb ) {\n\n\t\tvar path = self.join( '/', folder, file.relative );\n\t\tself.upload( file, path, cb );\n\n\t}, options );\n\n\tstream.resume();\n\treturn stream;\n\n}\n","/home/travis/build/npmtest/node-npmtest-vinyl-ftp/node_modules/vinyl-ftp/lib/delete.js":"module.exports = del;\n\nfunction del( path, cb ) {\n\n\tvar self = this;\n\tvar rel;\n\n\tthis.acquire( onAcquire );\n\n\tfunction onAcquire( err, ftp ) {\n\n\t\trel = ftp;\n\t\tif ( err ) return final( err );\n\n\t\tself.log( 'DEL  ', path );\n\t\tftp.delete( path, final );\n\n\t}\n\n\tfunction final( err ) {\n\n\t\tself.release( rel );\n\t\tcb( err );\n\n\t}\n\n}\n","/home/travis/build/npmtest/node-npmtest-vinyl-ftp/node_modules/vinyl-ftp/lib/rmdir.js":"module.exports = rmdir;\n\nfunction rmdir( path, cb ) {\n\n\tvar self = this;\n\tvar rel;\n\n\tthis.acquire( onAcquire );\n\n\tfunction onAcquire( err, ftp ) {\n\n\t\trel = ftp;\n\t\tif ( err ) return final( err );\n\n\t\tself.log( 'RMDIR', path );\n\t\tftp.rmdir( path, true, final );\n\n\t}\n\n\tfunction final( err ) {\n\n\t\tself.release( rel );\n\t\tif ( err && err.message.match( /no such file/i ) ) return cb();\n\t\tcb( err );\n\n\t}\n\n}\n","/home/travis/build/npmtest/node-npmtest-vinyl-ftp/node_modules/vinyl-ftp/lib/clean.js":"var Fs = require( 'fs' );\nvar Path = require( 'path' );\n\nmodule.exports = clean;\n\nfunction clean( globs, local, options ) {\n\n\toptions = this.makeOptions( options );\n\tvar self = this;\n\n\tvar glob = this.glob( globs, options );\n\n\tfunction stat( remote, cb ) {\n\n\t\tFs.stat( Path.join( local, remote.relative ), function ( err, stats ) {\n\t\t\tcheck( err, remote, stats, cb );\n\t\t} );\n\n\t}\n\n\tfunction check( err, remote, stats, cb ) {\n\n\t\tvar method;\n\n\t\tif ( err ) {\n\t\t\tif ( err.message.match( /ENOENT/ ) ) {\n\t\t\t\tif ( self.isDirectory( remote ) ) {\n\t\t\t\t\tmethod = 'rmdir';\n\t\t\t\t} else {\n\t\t\t\t\tmethod = 'delete';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn cb( err );\n\t\t\t}\n\t\t}\n\n\t\tif ( method ) {\n\t\t\tself[ method ]( remote.path, cb );\n\t\t} else {\n\t\t\tcb();\n\t\t}\n\t}\n\n\treturn glob.pipe( this.parallel( stat, options ) );\n\n}\n","/home/travis/build/npmtest/node-npmtest-vinyl-ftp/node_modules/vinyl-ftp/lib/filter.js":"/**\n * Filter vinyl streams based on local and remote file\n */\n\nmodule.exports = {\n\n\tnewer: function ( folder, options ) {\n\n\t\toptions = this.makeOptions( options );\n\t\treturn this.filter( folder, function ( file, remote, cb ) {\n\n\t\t\tcb( null, !remote || file.stat.mtime > remote.ftp.date );\n\n\t\t}, options );\n\n\t},\n\n\tdifferentSize: function ( folder, options ) {\n\n\t\toptions = this.makeOptions( options );\n\t\treturn this.filter( folder, function ( file, remote, cb ) {\n\n\t\t\tcb( null, !remote || file.stat.size !== remote.ftp.size );\n\n\t\t}, options );\n\n\t},\n\n\tnewerOrDifferentSize: function ( folder, options ) {\n\n\t\toptions = this.makeOptions( options );\n\t\treturn this.filter( folder, function ( file, remote, cb ) {\n\n\t\t\tcb( null, !remote || file.stat.mtime > remote.ftp.date || file.stat.size !== remote.ftp.size );\n\n\t\t}, options );\n\n\t},\n\n\tfilter: function ( folder, filter, options ) {\n\n\t\toptions = this.makeOptions( options );\n\t\tvar self = this;\n\n\t\treturn this.parallel( function ( file, cb ) {\n\n\t\t\tvar path = self.join( '/', folder, file.relative );\n\n\t\t\tself.remote( path, onRemote );\n\n\t\t\tfunction onRemote( err, remote ) {\n\n\t\t\t\tif ( err ) return cb( err );\n\t\t\t\tfilter( file, remote, onFilter );\n\n\t\t\t}\n\n\t\t\tfunction onFilter( err, emit ) {\n\n\t\t\t\tcb( err, emit ? file : null );\n\n\t\t\t}\n\n\t\t}, options );\n\n\t}\n\n};\n","/home/travis/build/npmtest/node-npmtest-vinyl-ftp/node_modules/vinyl-ftp/lib/mode.js":"module.exports = {\n\n\tmode: function ( folder, mode, options ) {\n\n\t\toptions = this.makeOptions( options );\n\t\tvar self = this;\n\n\t\tvar stream = this.parallel( function ( file, cb ) {\n\n\t\t\tvar path = self.join( '/', folder, file.relative );\n\t\t\tself.chmod( path, mode, cb );\n\n\t\t}, options );\n\n\t\tstream.resume();\n\t\treturn stream;\n\n\t}\n\n};\n","/home/travis/build/npmtest/node-npmtest-vinyl-ftp/node_modules/vinyl-ftp/lib/ftp.js":"var Stream = require( 'stream' );\nvar Path = require( 'path' );\nvar Ftp = require( 'ftp' );\nvar Vinyl = require( 'vinyl' );\nvar mlsd = require( './mlsd' );\nvar Cache = require( './cache' );\n\nmodule.exports = {\n\n\tupload: function ( file, path, cb ) {\n\n\t\tvar self = this;\n\t\tvar stream = new Stream.PassThrough();\n\n\t\tif ( file.isNull() ) {\n\n\t\t\tif ( file.stat && file.stat.isDirectory() ) this.mkdirp( path, cb );\n\t\t\telse cb( null, file );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( file.isStream() ) {\n\t\t\tfile.contents.pipe( stream );\n\t\t} else if ( file.isBuffer() ) {\n\t\t\tstream.end( file.contents );\n\t\t}\n\n\t\t// ensure that parent directory exists\n\t\tself.mkdirp( Path.dirname( path ), onParent );\n\n\t\tfunction onParent( err ) {\n\n\t\t\tif ( err ) return final( err );\n\t\t\tself.acquire( onAcquire );\n\n\t\t}\n\n\t\tvar rel;\n\n\t\tfunction onAcquire( err, ftp ) {\n\n\t\t\trel = ftp;\n\t\t\tif ( err ) return final( err );\n\n\t\t\tself.log( 'PUT  ', path );\n\t\t\tftp.put( stream, path, final );\n\n\t\t\t// THE FOLLOWING MUST BE AFTER ftp.put()\n\t\t\t// Somehow, if you attach a 'data' handler before\n\t\t\t// ftp.put, the callback of ftp.put is never called\n\n\t\t\tif ( file.stat ) {\n\n\t\t\t\tvar uploaded = 0;\n\t\t\t\tvar size = file.stat.size;\n\n\t\t\t\tstream.on( 'data', function ( chunk ) {\n\n\t\t\t\t\tuploaded += chunk.length;\n\n\t\t\t\t\tvar progress = Math.floor( uploaded / size * 100 ).toString();\n\t\t\t\t\tif ( progress.length === 1 ) progress = '  ' + progress;\n\t\t\t\t\tif ( progress.length === 2 ) progress = ' ' + progress;\n\n\t\t\t\t\tself.log( 'UP   ', progress + '% ' + path );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction final( err ) {\n\n\t\t\tself.release( rel );\n\t\t\tcb( err, file );\n\n\t\t}\n\n\t},\n\n\tdownbuffer: function ( path, cb ) {\n\n\t\tthis.downstream( path, function ( err, stream ) {\n\n\t\t\tif ( err ) return cb( err );\n\n\t\t\tvar bufs = [];\n\n\t\t\tstream.on( 'data', function ( data ) {\n\n\t\t\t\tbufs.push( data );\n\n\t\t\t} );\n\n\t\t\tstream.on( 'end', function () {\n\n\t\t\t\tcb( null, Buffer.concat( bufs ) );\n\n\t\t\t} );\n\n\t\t\tstream.on( 'error', function ( err ) {\n\n\t\t\t\t cb( err );\n\n\t\t\t} );\n\n\t\t} );\n\n\t},\n\n\tdownstream: function ( path, cb ) {\n\n\t\tvar self = this;\n\t\tvar remote, rel;\n\n\t\tthis.remote( path, onRemote );\n\n\t\tfunction onRemote( err, rem ) {\n\n\t\t\tif ( err ) return cb( err );\n\t\t\tif ( !rem ) return cb( new Error( 'No such file' ) );\n\t\t\tremote = rem;\n\n\t\t\tself.acquire( onAcquire );\n\n\t\t}\n\n\t\tfunction onAcquire( err, ftp ) {\n\n\t\t\trel = ftp;\n\t\t\tif ( err ) return onStream( err );\n\n\t\t\tself.log( 'GET  ', path );\n\t\t\tftp.get( path, onStream );\n\n\t\t}\n\n\t\tfunction onStream( err, stream ) {\n\n\t\t\tif ( err ) {\n\n\t\t\t\tself.release( rel );\n\t\t\t\treturn cb( err );\n\n\t\t\t}\n\n\t\t\tstream.on( 'end', function () {\n\n\t\t\t\tself.release( rel );\n\n\t\t\t} );\n\n\t\t\tstream.on( 'error', function () {\n\n\t\t\t\tself.release( rel, true );\n\n\t\t\t} );\n\n\t\t\tvar bytes = 0;\n\t\t\tvar size = remote.ftp.size;\n\n\t\t\tstream.on( 'data', function ( chunk ) {\n\n\t\t\t\tbytes += chunk.length;\n\n\t\t\t\tvar progress = Math.floor( bytes / size * 100 ).toString();\n\t\t\t\tif ( progress.length === 1 ) progress = '  ' + progress;\n\t\t\t\tif ( progress.length === 2 ) progress = ' ' + progress;\n\n\t\t\t\tself.log( 'DOWN ', progress + '% ' + path );\n\n\t\t\t} );\n\n\t\t\t// the socket stream returned by the ftp client cannot be paused\n\t\t\t// add intermediate passthrough stream so piped streams get data\n\t\t\tstream = stream.pipe( new Stream.PassThrough() );\n\n\t\t\tcb( null, stream );\n\n\t\t}\n\n\t},\n\n\tmkdirp: function ( path, cb ) {\n\n\t\tif ( !this._mkdirp ) {\n\n\t\t\tvar self = this;\n\n\t\t\tthis._mkdirp = new Cache( function ( path, cb ) {\n\n\t\t\t\t// skip if path is root\n\t\t\t\tif ( path === '/' || path === '' ) {\n\n\t\t\t\t\treturn final();\n\n\t\t\t\t}\n\n\t\t\t\tself.remote( path, onRemote );\n\n\t\t\t\tfunction onRemote( err, remote ) {\n\n\t\t\t\t\tif ( err ) return final( err );\n\t\t\t\t\tif ( remote && !self.isDirectory( remote ) ) return final( new Error( path + ' is a file, cannot MKDIR' ) );\n\t\t\t\t\tif ( remote ) return final(); // skip if exists\n\n\t\t\t\t\t// ensure that parent directory exists\n\t\t\t\t\tself.mkdirp( Path.dirname( path ), onParent );\n\n\t\t\t\t}\n\n\t\t\t\tfunction onParent( err ) {\n\n\t\t\t\t\tif ( err ) return final( err );\n\t\t\t\t\tself.acquire( onAcquire );\n\n\t\t\t\t}\n\n\t\t\t\tvar rel;\n\n\t\t\t\tfunction onAcquire( err, ftp ) {\n\n\t\t\t\t\trel = ftp;\n\t\t\t\t\tif ( err ) return final( err );\n\n\t\t\t\t\tself.log( 'MKDIR', path );\n\t\t\t\t\tftp.mkdir( path, final );\n\n\t\t\t\t}\n\n\t\t\t\tfunction final( err ) {\n\n\t\t\t\t\tself.release( rel );\n\t\t\t\t\tif ( err && err.message.match( /file exists/i ) ) return cb();\n\t\t\t\t\tcb( err );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\tpath = this.join( '/', path );\n\t\treturn this._mkdirp.get( path, cb );\n\n\t},\n\n\tchmod: function ( path, mode, cb ) {\n\n\t\tvar self = this;\n\t\tpath = this.join( '/', path );\n\t\tvar rel;\n\n\t\tself.acquire( onAcquire );\n\n\t\tfunction onAcquire( err, ftp ) {\n\n\t\t\trel = ftp;\n\t\t\tif ( err ) return final( err );\n\n\t\t\tself.log( 'SITE ', 'CHMOD', mode, path );\n\t\t\tftp.site( 'CHMOD ' + mode + ' ' + path, final );\n\n\t\t}\n\n\t\tfunction final( err ) {\n\n\t\t\tself.release( rel );\n\t\t\tcb( err );\n\n\t\t}\n\n\t},\n\n\tremote: function ( path, cb ) {\n\n\t\tvar self = this;\n\t\tpath = this.join( '/', path );\n\t\tvar basename = Path.basename( path );\n\t\tvar dirname = Path.dirname( path );\n\n\t\tself.mlsdOrList( dirname, onFiles );\n\n\t\tfunction onFiles( err, files ) {\n\n\t\t\tif ( err ) return cb( err );\n\n\t\t\tfor ( var i = 0; i < files.length; ++i ) {\n\n\t\t\t\tif ( files[ i ].ftp.name === basename ) return cb( null, files[ i ] );\n\n\t\t\t}\n\n\t\t\tcb();\n\n\t\t}\n\n\t},\n\n\tmlsdOrList: function ( path, cb ) {\n\n\t\tvar self = this;\n\n\t\tif ( this.noMlsd ) return this.list( path, cb );\n\n\t\tsetImmediate(function() {\n\t\t\tself.mlsd( path, onMlsd );\n\t\t});\n\n\t\tfunction onMlsd( err, files ) {\n\n\t\t\tif ( err && ( err.code === 502 || err.code === 500 ) ) {\n\n\t\t\t\t// mlsd not implemented, fallback to LIST\n\t\t\t\treturn self.list( path, cb );\n\n\t\t\t} else if ( files && files.length > 0 && !files[ 0 ].ftp.date ) {\n\n\t\t\t\t// mlsd didnt send any date, try LIST\n\t\t\t\treturn self.list( path, cb );\n\n\t\t\t}\n\n\t\t\tcb( err, files );\n\n\t\t}\n\n\t},\n\n\tmlsd: function ( path, cb ) {\n\n\t\tif ( !this._mlsd ) {\n\n\t\t\tvar self = this;\n\n\t\t\tthis._mlsd = new Cache( function ( path, cb ) {\n\n\t\t\t\tvar rel;\n\n\t\t\t\tself.acquire( onAcquire );\n\n\t\t\t\tfunction onAcquire( err, ftp ) {\n\n\t\t\t\t\trel = ftp;\n\t\t\t\t\tif ( err ) return final( err );\n\n\t\t\t\t\tself.log( 'MLSD ', path );\n\t\t\t\t\tmlsd.bind( ftp )( path, onFiles );\n\n\t\t\t\t}\n\n\t\t\t\tfunction onFiles( err,  files ) {\n\n\t\t\t\t\t// no such file or directory\n\t\t\t\t\tif ( err && ( err.code === 501 || err.code === 550 ) ) return final( null, [] );\n\t\t\t\t\tif ( err ) return final( err );\n\n\t\t\t\t\tfinal( null, self.vinylFiles( path, files ) );\n\n\t\t\t\t}\n\n\t\t\t\tfunction final( err, files ) {\n\n\t\t\t\t\tself.release( rel );\n\t\t\t\t\tcb( err, files );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\tpath = this.join( '/', path );\n\t\tthis._mlsd.get( path, cb );\n\n\t},\n\n\tlist: function ( path, cb ) {\n\n\t\tif ( !this._list ) {\n\n\t\t\tvar self = this;\n\n\t\t\tthis._list = new Cache( function ( path, cb ) {\n\n\t\t\t\tvar rel;\n\n\t\t\t\tself.acquire( onAcquire );\n\n\t\t\t\tfunction onAcquire( err, ftp ) {\n\n\t\t\t\t\trel = ftp;\n\t\t\t\t\tif ( err ) return final( err );\n\n\t\t\t\t\tself.log( 'LIST ', path );\n\t\t\t\t\tftp.list( path, onFiles );\n\n\t\t\t\t}\n\n\t\t\t\tfunction onFiles( err, files ) {\n\n\t\t\t\t\t// no such file or directory\n\t\t\t\t\tif ( err && ( err.code === 550 || err.code === 450 ) ) return final( null, [] );\n\t\t\t\t\tif ( err ) return final( err );\n\n\t\t\t\t\tfinal( null, self.vinylFiles( path, files ) );\n\n\t\t\t\t}\n\n\t\t\t\tfunction final( err, files ) {\n\n\t\t\t\t\tself.release( rel );\n\t\t\t\t\tcb( err, files );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\tpath = this.join( '/', path );\n\t\tthis._list.get( path, cb );\n\n\t},\n\n\tvinylFiles: function ( dirname, files ) {\n\n\t\tvar self = this;\n\n\t\treturn files.filter( function ( file ) {\n\n\t\t\treturn file.name !== '.' && file.name !== '..';\n\n\t\t} ).map( function ( file ) {\n\n\t\t\tfile.date = self.fixDate( file.date );\n\n\t\t\tvar vinyl = new Vinyl( {\n\t\t\t\tcwd: '/',\n\t\t\t\tpath: self.join( dirname, file.name )\n\t\t\t} );\n\t\t\tvinyl.ftp = file;\n\n\t\t\treturn vinyl;\n\n\t\t} );\n\n\t},\n\n\tacquire: function ( cb ) {\n\n\t\tif ( this.idle.length > 0 ) {\n\n\t\t\tcb( null, this.idle.shift() );\n\n\t\t} else if ( this.connectionCount < this.config.maxConnections ) {\n\n\t\t\tthis.log( 'CONN ' );\n\n\t\t\tvar self = this;\n\t\t\tvar ftp = new Ftp();\n\t\t\tvar called = false;\n\t\t\t++this.connectionCount;\n\n\t\t\tftp.on( 'ready', function () {\n\n\t\t\t\tself.log( 'READY' );\n\t\t\t\tcalled = true;\n\t\t\t\tcb( null, ftp );\n\n\t\t\t} );\n\n\t\t\tftp.on( 'error', function ( err ) {\n\n\t\t\t\tvar code = err.code ? (' (' + err.code + ')') : '';\n\t\t\t\tself.log( 'ERROR', err.stack + code );\n\t\t\t\tself.release( ftp, true );\n\n\t\t\t\t// only enqueue callback if not called yet\n\t\t\t\tif ( !called ) {\n\n\t\t\t\t\tcalled = true;\n\n\t\t\t\t\tif ( self.connectionCount === 0 ) {\n\n\t\t\t\t\t\t// there's no hope that a working connection will be released\n\t\t\t\t\t\t// pass error\n\t\t\t\t\t\treturn cb( err );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tself.queue.push( cb );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tftp.connect( this.config );\n\n\t\t} else {\n\n\t\t\tthis.queue.push( cb );\n\n\t\t}\n\n\t},\n\n\trelease: function ( ftp, force ) {\n\n\t\tif ( !ftp ) return;\n\n\t\tif ( force ) {\n\n\t\t\tthis.log( 'DISC ' );\n\t\t\tftp.end();\n\t\t\t--this.connectionCount;\n\n\t\t} else if ( this.queue.length > 0 ) {\n\n\t\t\treuse = true;\n\t\t\tvar first = this.queue.shift();\n\t\t\tfirst( null, ftp );\n\n\t\t} else {\n\n\t\t\tthis.pushIdle( ftp );\n\n\t\t}\n\n\t},\n\n\treload: function () {\n\n\t\tif ( this._mkdirp ) this._mkdirp.clear();\n\t\tif ( this._mlsd ) this._mlsd.clear();\n\t\tif ( this._list ) this._list.clear();\n\n\t\treturn this;\n\n\t},\n\n\tpushIdle: function ( ftp ) {\n\n\t\tvar self = this;\n\n\t\t// add connection to idle list\n\t\tthis.idle.push( ftp );\n\n\t\t// reset any earlier timeout\n\t\tclearTimeout( this.idleTimer );\n\n\t\t// disconnect all after timeout\n\t\tthis.idleTimer = setTimeout( function () {\n\n\t\t\tself.idle.forEach( function ( ftp ) {\n\n\t\t\t\tself.log( 'DISC ' );\n\t\t\t\tftp.end();\n\t\t\t\t--self.connectionCount;\n\n\t\t\t} );\n\n\t\t\tself.idle = [];\n\n\t\t}, this.config.idleTimeout );\n\n\t}\n\n};\n","/home/travis/build/npmtest/node-npmtest-vinyl-ftp/node_modules/vinyl-ftp/lib/mlsd.js":"/**\n * MLSD method for the node ftp module\n * This is mostly copied from https://github.com/mscdex/node-ftp\n * Original Copyright Brian White: https://github.com/mscdex\n * MLSD implemented by Morris Brodersen <mb@morrisbrodersen.de>\n */\n\nvar RE_EOL = /\\r?\\n/g,\n    RE_SEP = /;/g,\n    RE_EQ = /=/;\n\nmodule.exports = function(path, zcomp, cb) {\n  var self = this, cmd;\n\n  if (typeof path === 'function') {\n    // list(function() {})\n    cb = path;\n    path = undefined;\n    cmd = 'MLSD';\n    zcomp = false;\n  } else if (typeof path === 'boolean') {\n    // list(true, function() {})\n    cb = zcomp;\n    zcomp = path;\n    path = undefined;\n    cmd = 'MLSD';\n  } else if (typeof zcomp === 'function') {\n    // list('/foo', function() {})\n    cb = zcomp;\n    cmd = 'MLSD ' + path;\n    zcomp = false;\n  } else\n    cmd = 'MLSD ' + path;\n\n  this._pasv(function(err, sock) {\n    if (err)\n      return cb(err);\n\n    if (self._queue[0] && self._queue[0].cmd === 'ABOR') {\n      sock.destroy();\n      return cb(new Error('Client aborted'));\n    }\n\n    var sockerr, done = false, replies = 0, entries, buffer = '', source = sock;\n\n    if (zcomp) {\n      source = zlib.createInflate();\n      sock.pipe(source);\n    }\n\n    source.on('data', function(chunk) { buffer += chunk.toString('binary'); });\n    source.once('error', function(err) {\n      if (!sock.aborting)\n        sockerr = err;\n    });\n    source.once('end', ondone);\n    source.once('close', ondone);\n\n    function ondone() {\n      done = true;\n      final();\n    }\n    function final() {\n      if (done && replies === 2) {\n        replies = 3;\n        if (sockerr)\n          return cb(new Error('Unexpected data connection error: ' + sockerr));\n        if (sock.aborting)\n          return cb(new Error('Client aborted'));\n\n        //\n\n        // process received data\n\n        entries = buffer.split( RE_EOL );\n        entries.pop(); // ending EOL\n        entries = entries.map( function( entry ) {\n          var kvs = entry.split( RE_SEP );\n          var obj = { name: kvs.pop().substring( 1 ) };\n          kvs.forEach( function( kv ) {\n\n            kv = kv.split( RE_EQ );\n            obj[ kv[0].toLowerCase() ] = kv[1];\n\n          } );\n\n          obj.size = parseInt( obj.size );\n\n          var modify = obj.modify;\n\n          if (modify) {\n            var year = modify.substr( 0, 4 );\n            var month = modify.substr( 4, 2 );\n            var date = modify.substr( 6, 2 );\n            var hour = modify.substr( 8, 2 );\n            var minute = modify.substr( 10, 2 );\n            var second = modify.substr( 12, 2 );\n            obj.date = new Date(\n              year + '-' + month + '-' + date + 'T' + hour + ':' +minute + ':' + second\n            );\n\n          }\n\n          return obj;\n        } );\n\n        //\n\n        if (zcomp) {\n          self._send('MODE S', function() {\n            cb(undefined, entries);\n          }, true);\n        } else\n          cb(undefined, entries);\n      }\n    }\n\n    if (zcomp) {\n      self._send('MODE Z', function(err, text, code) {\n        if (err) {\n          sock.destroy();\n          return cb(makeError(code, 'Compression not supported'));\n        }\n        sendList();\n      }, true);\n    } else\n      sendList();\n\n    function sendList() {\n      // this callback will be executed multiple times, the first is when server\n      // replies with 150 and then a final reply to indicate whether the\n      // transfer was actually a success or not\n      self._send(cmd, function(err, text, code) {\n        if (err) {\n          sock.destroy();\n          if (zcomp) {\n            self._send('MODE S', function() {\n              cb(err);\n            }, true);\n          } else\n            cb(err);\n          return;\n        }\n\n      // some servers may not open a data connection for empty directories\n      if (++replies === 1 && code === 226) {\n        replies = 2;\n        sock.destroy();\n        final();\n      } else if (replies === 2)\n        final();\n      }, true);\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-vinyl-ftp/node_modules/vinyl-ftp/lib/cache.js":"/**\n * A cache keeps track of async resources and actions that\n * should be loaded or executed only once.\n */\n\nmodule.exports = function ( fn ) {\n\n\tvar cache = {};\n\n\tthis.get = function ( id, cb ) {\n\n\t\tvar entry = cache[ id ];\n\n\t\tif ( entry ) {\n\n\t\t\tif ( entry.done ) {\n\n\t\t\t\tif ( cb ) cb( entry.err, entry.data );\n\n\t\t\t} else {\n\n\t\t\t\tentry.queue.push( cb );\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tentry = cache[ id ] = {\n\t\t\tdone:  false,\n\t\t\terr:   null,\n\t\t\tdata:  null,\n\t\t\tqueue: [ cb ]\n\t\t};\n\n\t\tfn( id, function ( err, data ) {\n\n\t\t\tentry.done = true;\n\t\t\tentry.err =   err;\n\t\t\tentry.data =  data;\n\t\t\tentry.queue.forEach( function ( cb ) {\n\n\t\t\t\tif ( cb ) cb( err, data );\n\n\t\t\t} );\n\t\t\tentry.queue = null;\n\n\t\t} );\n\n\t};\n\n\tthis.clear = function () {\n\n\t\tcache = {};\n\n\t};\n\n\tthis.remove = function ( id ) {\n\n\t\tdelete cache[ id ];\n\n\t};\n\n};\n","/home/travis/build/npmtest/node-npmtest-vinyl-ftp/node_modules/vinyl-ftp/lib/helpers.js":"var Path = require( 'path' );\nvar assign = require( 'object-assign' );\nvar parallel = require( 'parallel-transform' );\n\nvar RE_BS = /\\\\/g;\n\nmodule.exports = {\n\n\tparallel: function ( transform, options ) {\n\n\t\toptions = assign( {}, this.config, options );\n\t\tvar p = Math.max( 1, parseInt( options.parallel ) );\n\t\tvar stream = parallel( p, transform );\n\n\t\treturn stream;\n\n\t},\n\n\tmakeOptions: function ( options ) {\n\n\t\toptions = options || {};\n\t\tif ( options.reload ) this.reload();\n\t\treturn options;\n\n\t},\n\n\tfixDate: function ( date ) {\n\n\t\tif ( !date ) return null;\n\n\t\tvar offset = 0;\n\n\t\tif ( this.config.timeOffset ) offset += this.config.timeOffset * 60000;\n\n\t\treturn new Date( date.valueOf() + offset );\n\n\t},\n\n\tisDirectory: function ( vf ) {\n\n\t\treturn vf.ftp.type.match( /^d|dir/i );\n\n\t},\n\n\tnormalize: function ( path ) {\n\n\t\treturn Path.normalize( path ).replace( RE_BS, '/' );\n\n\t},\n\n\tjoin: function () {\n\n\t\treturn Path.join.apply( Path, arguments ).replace( RE_BS, '/' );\n\n\t},\n\n\tlog: function () {\n\n\t\tvar log = this.config.log;\n\n\t\tif ( typeof log === 'function' ) log.apply( undefined, arguments );\n\n\t}\n\n};\n"}